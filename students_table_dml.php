<?php

// Data functions (insert, update, delete, form) for table students_table

// This script and data application was generated by AppGini, https://bigprof.com/appgini
// Download AppGini for free from https://bigprof.com/appgini/download/

function students_table_insert(&$error_message = '') {
	global $Translation;

	// mm: can member insert record?
	$arrPerm = getTablePermissions('students_table');
	if(!$arrPerm['insert']) {
		$error_message = $Translation['no insert permission'];
		return false;
	}

	$data = [
		'name' => Request::val('name', ''),
		'gender' => Request::val('gender', 'Male'),
		'dob' => Request::dateComponents('dob', ''),
		'email' => Request::val('email', ''),
		'phone' => Request::val('phone', ''),
		'address' => Request::val('address', ''),
		'admission_date' => Request::dateComponents('admission_date', '1'),
		'department' => Request::lookup('department', ''),
		'course' => Request::val('course', ''),
		'year' => Request::val('year', ''),
		'created_at' => parseCode('<%%creationDateTime%%>', true),
		'created_by_username' => parseCode('<%%creatorUsername%%>', true),
	];

	// record owner is current user
	$recordOwner = getLoggedMemberID();

	$recID = tableInsert('students_table', $data, $recordOwner, $error_message);

	// if this record is a copy of another record, copy children if applicable
	if(strlen(Request::val('SelectedID')) && $recID !== false)
		students_table_copy_children($recID, Request::val('SelectedID'));

	return $recID;
}

function students_table_copy_children($destination_id, $source_id) {
	global $Translation;
	$requests = []; // array of curl handlers for launching insert requests
	$eo = ['silentErrors' => true];
	$safe_sid = makeSafe($source_id);
	$currentUsername = getLoggedMemberID();
	$errorMessage = '';

	// launch requests, asynchronously
	curl_batch($requests);
}

function students_table_delete($selected_id, $AllowDeleteOfParents = false, $skipChecks = false) {
	// insure referential integrity ...
	global $Translation;
	$selected_id = makeSafe($selected_id);

	// mm: can member delete record?
	if(!check_record_permission('students_table', $selected_id, 'delete')) {
		return $Translation['You don\'t have enough permissions to delete this record'];
	}

	// hook: students_table_before_delete
	if(function_exists('students_table_before_delete')) {
		$args = [];
		if(!students_table_before_delete($selected_id, $skipChecks, getMemberInfo(), $args))
			return $Translation['Couldn\'t delete this record'] . (
				!empty($args['error_message']) ?
					'<div class="text-bold">' . strip_tags($args['error_message']) . '</div>'
					: ''
			);
	}

	sql("DELETE FROM `students_table` WHERE `id`='{$selected_id}'", $eo);

	// hook: students_table_after_delete
	if(function_exists('students_table_after_delete')) {
		$args = [];
		students_table_after_delete($selected_id, getMemberInfo(), $args);
	}

	// mm: delete ownership data
	sql("DELETE FROM `membership_userrecords` WHERE `tableName`='students_table' AND `pkValue`='{$selected_id}'", $eo);
}

function students_table_update(&$selected_id, &$error_message = '') {
	global $Translation;

	// mm: can member edit record?
	if(!check_record_permission('students_table', $selected_id, 'edit')) return false;

	$data = [
		'name' => Request::val('name', ''),
		'gender' => Request::val('gender', ''),
		'dob' => Request::dateComponents('dob', ''),
		'email' => Request::val('email', ''),
		'phone' => Request::val('phone', ''),
		'address' => Request::val('address', ''),
		'admission_date' => Request::dateComponents('admission_date', ''),
		'department' => Request::lookup('department', ''),
		'course' => Request::val('course', ''),
		'year' => Request::val('year', ''),
		'last_updated_at' => parseCode('<%%editingDateTime%%>', false),
		'last_updated_by_username' => parseCode('<%%editorUsername%%>', false),
	];

	// get existing values
	$old_data = getRecord('students_table', $selected_id);
	if(is_array($old_data)) {
		$old_data = array_map('makeSafe', $old_data);
		$old_data['selectedID'] = makeSafe($selected_id);
	}

	$data['selectedID'] = makeSafe($selected_id);

	// hook: students_table_before_update
	if(function_exists('students_table_before_update')) {
		$args = ['old_data' => $old_data];
		if(!students_table_before_update($data, getMemberInfo(), $args)) {
			if(isset($args['error_message'])) $error_message = $args['error_message'];
			return false;
		}
	}

	$set = $data; unset($set['selectedID']);
	foreach ($set as $field => $value) {
		$set[$field] = ($value !== '' && $value !== NULL) ? $value : NULL;
	}

	if(!update(
		'students_table',
		backtick_keys_once($set),
		['`id`' => $selected_id],
		$error_message
	)) {
		echo $error_message;
		echo '<a href="students_table_view.php?SelectedID=' . urlencode($selected_id) . "\">{$Translation['< back']}</a>";
		exit;
	}


	update_calc_fields('students_table', $data['selectedID'], calculated_fields()['students_table']);

	// hook: students_table_after_update
	if(function_exists('students_table_after_update')) {
		if($row = getRecord('students_table', $data['selectedID'])) $data = array_map('makeSafe', $row);

		$data['selectedID'] = $data['id'];
		$args = ['old_data' => $old_data];
		if(!students_table_after_update($data, getMemberInfo(), $args)) return;
	}

	// mm: update record update timestamp
	set_record_owner('students_table', $selected_id);
}

function students_table_form($selectedId = '', $allowUpdate = true, $allowInsert = true, $allowDelete = true, $separateDV = true, $templateDV = '', $templateDVP = '') {
	// function to return an editable form for a table records
	// and fill it with data of record whose ID is $selectedId. If $selectedId
	// is empty, an empty form is shown, with only an 'Add New'
	// button displayed.

	global $Translation;
	$eo = ['silentErrors' => true];
	$noUploads = $row = $urow = $jsReadOnly = $jsEditable = $lookups = null;
	$noSaveAsCopy = true;
	$hasSelectedId = strlen($selectedId) > 0;

	// mm: get table permissions
	$arrPerm = getTablePermissions('students_table');
	$allowInsert = ($arrPerm['insert'] ? true : false);
	$allowUpdate = $hasSelectedId && check_record_permission('students_table', $selectedId, 'edit');
	$allowDelete = $hasSelectedId && check_record_permission('students_table', $selectedId, 'delete');

	if(!$allowInsert && !$hasSelectedId)
		// no insert permission and no record selected
		// so show access denied error -- except if TVDV: just hide DV
		return $separateDV ? $Translation['tableAccessDenied'] : '';

	if($hasSelectedId && !check_record_permission('students_table', $selectedId, 'view'))
		return $Translation['tableAccessDenied'];

	// print preview?
	$dvprint = $hasSelectedId && Request::val('dvprint_x') != '';

	$showSaveNew = !$dvprint && ($allowInsert && !$hasSelectedId);
	$showSaveChanges = !$dvprint && $allowUpdate && $hasSelectedId;
	$showDelete = !$dvprint && $allowDelete && $hasSelectedId;
	$showSaveAsCopy = !$dvprint && ($allowInsert && $hasSelectedId && !$noSaveAsCopy);
	$fieldsAreEditable = !$dvprint && (($allowInsert && !$hasSelectedId) || ($allowUpdate && $hasSelectedId) || $showSaveAsCopy);

	$filterer_department = Request::val('filterer_department');

	// populate filterers, starting from children to grand-parents

	// unique random identifier
	$rnd1 = ($dvprint ? rand(1000000, 9999999) : '');
	// combobox: gender
	$combo_gender = new Combo;
	$combo_gender->ListType = 0;
	$combo_gender->MultipleSeparator = ', ';
	$combo_gender->ListBoxHeight = 10;
	$combo_gender->RadiosPerLine = 1;
	if(is_file(__DIR__ . '/hooks/students_table.gender.csv')) {
		$gender_data = addslashes(implode('', @file(__DIR__ . '/hooks/students_table.gender.csv')));
		$combo_gender->ListItem = array_trim(explode('||', entitiesToUTF8(convertLegacyOptions($gender_data))));
		$combo_gender->ListData = $combo_gender->ListItem;
	} else {
		$combo_gender->ListItem = array_trim(explode('||', entitiesToUTF8(convertLegacyOptions("Male;;Female;;Prefer Not to Say"))));
		$combo_gender->ListData = $combo_gender->ListItem;
	}
	$combo_gender->SelectName = 'gender';
	// combobox: dob
	$combo_dob = new DateCombo;
	$combo_dob->DateFormat = "dmy";
	$combo_dob->MinYear = defined('students_table.dob.MinYear') ? constant('students_table.dob.MinYear') : 1900;
	$combo_dob->MaxYear = defined('students_table.dob.MaxYear') ? constant('students_table.dob.MaxYear') : 2100;
	$combo_dob->DefaultDate = parseMySQLDate('', '');
	$combo_dob->MonthNames = $Translation['month names'];
	$combo_dob->NamePrefix = 'dob';
	// combobox: admission_date
	$combo_admission_date = new DateCombo;
	$combo_admission_date->DateFormat = "dmy";
	$combo_admission_date->MinYear = defined('students_table.admission_date.MinYear') ? constant('students_table.admission_date.MinYear') : 1900;
	$combo_admission_date->MaxYear = defined('students_table.admission_date.MaxYear') ? constant('students_table.admission_date.MaxYear') : 2100;
	$combo_admission_date->DefaultDate = parseMySQLDate('1', '1');
	$combo_admission_date->MonthNames = $Translation['month names'];
	$combo_admission_date->NamePrefix = 'admission_date';
	// combobox: department
	$combo_department = new DataCombo;
	// combobox: year
	$combo_year = new Combo;
	$combo_year->ListType = 0;
	$combo_year->MultipleSeparator = ', ';
	$combo_year->ListBoxHeight = 10;
	$combo_year->RadiosPerLine = 1;
	if(is_file(__DIR__ . '/hooks/students_table.year.csv')) {
		$year_data = addslashes(implode('', @file(__DIR__ . '/hooks/students_table.year.csv')));
		$combo_year->ListItem = array_trim(explode('||', entitiesToUTF8(convertLegacyOptions($year_data))));
		$combo_year->ListData = $combo_year->ListItem;
	} else {
		$combo_year->ListItem = array_trim(explode('||', entitiesToUTF8(convertLegacyOptions("1st Year - 1st Semester;;1st Year - 2nd Semester;;2nd Year - 1st Semester;;2nd Year - 2nd Semester;;"))));
		$combo_year->ListData = $combo_year->ListItem;
	}
	$combo_year->SelectName = 'year';

	if($hasSelectedId) {
		if(!($row = getRecord('students_table', $selectedId))) {
			return error_message($Translation['No records found'], 'students_table_view.php', false);
		}
		$combo_gender->SelectedData = $row['gender'];
		$combo_dob->DefaultDate = $row['dob'];
		$combo_admission_date->DefaultDate = $row['admission_date'];
		$combo_department->SelectedData = $row['department'];
		$combo_year->SelectedData = $row['year'];
		$urow = $row; /* unsanitized data */
		$row = array_map('safe_html', $row);
	} else {
		$filterField = Request::val('FilterField');
		$filterOperator = Request::val('FilterOperator');
		$filterValue = Request::val('FilterValue');
		$combo_gender->SelectedText = (isset($filterField[1]) && $filterField[1] == '3' && $filterOperator[1] == '<=>' ? $filterValue[1] : entitiesToUTF8('Male'));
		$combo_department->SelectedData = $filterer_department;
		$combo_year->SelectedText = (isset($filterField[1]) && $filterField[1] == '11' && $filterOperator[1] == '<=>' ? $filterValue[1] : entitiesToUTF8(''));
	}
	$combo_gender->Render();
	$combo_department->HTML = '<span id="department-container' . $rnd1 . '"></span><input type="hidden" name="department" id="department' . $rnd1 . '" value="' . html_attr($combo_department->SelectedData) . '">';
	$combo_department->MatchText = '<span id="department-container-readonly' . $rnd1 . '"></span><input type="hidden" name="department" id="department' . $rnd1 . '" value="' . html_attr($combo_department->SelectedData) . '">';
	$combo_year->Render();

	ob_start();
	?>

	<script>
		// initial lookup values
		AppGini.current_department__RAND__ = { text: "", value: "<?php echo addslashes($hasSelectedId ? $urow['department'] : htmlspecialchars($filterer_department, ENT_QUOTES)); ?>"};

		$j(function() {
			setTimeout(function() {
				if(typeof(department_reload__RAND__) == 'function') department_reload__RAND__();
			}, 50); /* we need to slightly delay client-side execution of the above code to allow AppGini.ajaxCache to work */
		});
		function department_reload__RAND__() {
		<?php if($fieldsAreEditable) { ?>

			$j("#department-container__RAND__").select2({
				/* initial default value */
				initSelection: function(e, c) {
					$j.ajax({
						url: 'ajax_combo.php',
						dataType: 'json',
						data: { id: AppGini.current_department__RAND__.value, t: 'students_table', f: 'department' },
						success: function(resp) {
							c({
								id: resp.results[0].id,
								text: resp.results[0].text
							});
							$j('[name="department"]').val(resp.results[0].id);
							$j('[id=department-container-readonly__RAND__]').html('<span class="match-text" id="department-match-text">' + resp.results[0].text + '</span>');
							if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=departments_table_view_parent]').hide(); } else { $j('.btn[id=departments_table_view_parent]').show(); }


							if(typeof(department_update_autofills__RAND__) == 'function') department_update_autofills__RAND__();
						}
					});
				},
				width: '100%',
				formatNoMatches: function(term) { return '<?php echo addslashes($Translation['No matches found!']); ?>'; },
				minimumResultsForSearch: 5,
				loadMorePadding: 200,
				ajax: {
					url: 'ajax_combo.php',
					dataType: 'json',
					cache: true,
					data: function(term, page) { return { s: term, p: page, t: 'students_table', f: 'department' }; },
					results: function(resp, page) { return resp; }
				},
				escapeMarkup: function(str) { return str; }
			}).on('change', function(e) {
				AppGini.current_department__RAND__.value = e.added.id;
				AppGini.current_department__RAND__.text = e.added.text;
				$j('[name="department"]').val(e.added.id);
				if(e.added.id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=departments_table_view_parent]').hide(); } else { $j('.btn[id=departments_table_view_parent]').show(); }


				if(typeof(department_update_autofills__RAND__) == 'function') department_update_autofills__RAND__();
			});

			if(!$j("#department-container__RAND__").length) {
				$j.ajax({
					url: 'ajax_combo.php',
					dataType: 'json',
					data: { id: AppGini.current_department__RAND__.value, t: 'students_table', f: 'department' },
					success: function(resp) {
						$j('[name="department"]').val(resp.results[0].id);
						$j('[id=department-container-readonly__RAND__]').html('<span class="match-text" id="department-match-text">' + resp.results[0].text + '</span>');
						if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=departments_table_view_parent]').hide(); } else { $j('.btn[id=departments_table_view_parent]').show(); }

						if(typeof(department_update_autofills__RAND__) == 'function') department_update_autofills__RAND__();
					}
				});
			}

		<?php } else { ?>

			$j.ajax({
				url: 'ajax_combo.php',
				dataType: 'json',
				data: { id: AppGini.current_department__RAND__.value, t: 'students_table', f: 'department' },
				success: function(resp) {
					$j('[id=department-container__RAND__], [id=department-container-readonly__RAND__]').html('<span class="match-text" id="department-match-text">' + resp.results[0].text + '</span>');
					if(resp.results[0].id == '<?php echo empty_lookup_value; ?>') { $j('.btn[id=departments_table_view_parent]').hide(); } else { $j('.btn[id=departments_table_view_parent]').show(); }

					if(typeof(department_update_autofills__RAND__) == 'function') department_update_autofills__RAND__();
				}
			});
		<?php } ?>

		}
	</script>
	<?php

	$lookups = str_replace('__RAND__', $rnd1, ob_get_clean());


	// code for template based detail view forms

	// open the detail view template
	if($dvprint) {
		$template_file = is_file("./{$templateDVP}") ? "./{$templateDVP}" : './templates/students_table_templateDVP.html';
		$templateCode = @file_get_contents($template_file);
	} else {
		$template_file = is_file("./{$templateDV}") ? "./{$templateDV}" : './templates/students_table_templateDV.html';
		$templateCode = @file_get_contents($template_file);
	}

	// process form title
	$templateCode = str_replace('<%%DETAIL_VIEW_TITLE%%>', 'Students table details', $templateCode);
	$templateCode = str_replace('<%%RND1%%>', $rnd1, $templateCode);
	$templateCode = str_replace('<%%EMBEDDED%%>', (Request::val('Embedded') ? 'Embedded=1' : ''), $templateCode);
	// process buttons
	if($showSaveNew) {
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-success" id="insert" name="insert_x" value="1"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save New'] . '</button>', $templateCode);
	} elseif($showSaveAsCopy) {
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="insert" name="insert_x" value="1"><i class="glyphicon glyphicon-plus-sign"></i> ' . $Translation['Save As Copy'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%INSERT_BUTTON%%>', '', $templateCode);
	}

	// 'Back' button action
	if(Request::val('Embedded')) {
		$backAction = 'AppGini.closeParentModal(); return false;';
	} else {
		$backAction = 'return true;';
	}

	if($hasSelectedId) {
		if(!Request::val('Embedded')) $templateCode = str_replace('<%%DVPRINT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="dvprint" name="dvprint_x" value="1" title="' . html_attr($Translation['Print Preview']) . '"><i class="glyphicon glyphicon-print"></i> ' . $Translation['Print Preview'] . '</button>', $templateCode);
		if($allowUpdate)
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '<button type="submit" class="btn btn-success btn-lg" id="update" name="update_x" value="1" title="' . html_attr($Translation['Save Changes']) . '"><i class="glyphicon glyphicon-ok"></i> ' . $Translation['Save Changes'] . '</button>', $templateCode);
		else
			$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);

		if($allowDelete)
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '<button type="submit" class="btn btn-danger" id="delete" name="delete_x" value="1" title="' . html_attr($Translation['Delete']) . '"><i class="glyphicon glyphicon-trash"></i> ' . $Translation['Delete'] . '</button>', $templateCode);
		else
			$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);

		$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '<button type="submit" class="btn btn-default" id="deselect" name="deselect_x" value="1" onclick="' . $backAction . '" title="' . html_attr($Translation['Back']) . '"><i class="glyphicon glyphicon-chevron-left"></i> ' . $Translation['Back'] . '</button>', $templateCode);
	} else {
		$templateCode = str_replace('<%%UPDATE_BUTTON%%>', '', $templateCode);
		$templateCode = str_replace('<%%DELETE_BUTTON%%>', '', $templateCode);

		// if not in embedded mode and user has insert only but no view/update/delete,
		// remove 'back' button
		if(
			$allowInsert
			&& !$allowUpdate && !$allowDelete && !$arrPerm['view']
			&& !Request::val('Embedded')
		)
			$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '', $templateCode);
		elseif($separateDV)
			$templateCode = str_replace(
				'<%%DESELECT_BUTTON%%>',
				'<button
					type="submit"
					class="btn btn-default"
					id="deselect"
					name="deselect_x"
					value="1"
					onclick="' . $backAction . '"
					title="' . html_attr($Translation['Back']) . '">
						<i class="glyphicon glyphicon-chevron-left"></i> ' .
						$Translation['Back'] .
				'</button>',
				$templateCode
			);
		else
			$templateCode = str_replace('<%%DESELECT_BUTTON%%>', '', $templateCode);
	}

	// set records to read only if user can't insert new records and can't edit current record
	if(!$fieldsAreEditable) {
		$jsReadOnly = '';
		$jsReadOnly .= "\t\$j('#name').replaceWith('<div class=\"form-control-static\" id=\"name\">' + (\$j('#name').val() || '') + '</div>');\n";
		$jsReadOnly .= "\t\$j('#gender').replaceWith('<div class=\"form-control-static\" id=\"gender\">' + (\$j('#gender').val() || '') + '</div>'); \$j('#gender-multi-selection-help').hide();\n";
		$jsReadOnly .= "\t\$j('#dob').prop('readonly', true);\n";
		$jsReadOnly .= "\t\$j('#dobDay, #dobMonth, #dobYear').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\t\$j('#email').parent().replaceWith(`<div class=\"form-control-static\" id=\"email\">\${\$j('#email').val() || ''}\${\$j('#email').val() ? '<a target=\"_blank\" class=\"hspacer-lg\" href=\"mailto:' + \$j('#email').val() + '\" target=\"_blank\"><i class=\"glyphicon glyphicon-envelope\"></i></a>' : ''}</div>`);\n";
		$jsReadOnly .= "\t\$j('#phone').replaceWith('<div class=\"form-control-static\" id=\"phone\">' + (\$j('#phone').val() || '') + '</div>');\n";
		$jsReadOnly .= "\t\$j('#admission_date').prop('readonly', true);\n";
		$jsReadOnly .= "\t\$j('#admission_dateDay, #admission_dateMonth, #admission_dateYear').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\t\$j('#department').prop('disabled', true).css({ color: '#555', backgroundColor: '#fff' });\n";
		$jsReadOnly .= "\t\$j('#department_caption').prop('disabled', true).css({ color: '#555', backgroundColor: 'white' });\n";
		$jsReadOnly .= "\t\$j('#course').replaceWith('<div class=\"form-control-static\" id=\"course\">' + (\$j('#course').val() || '') + '</div>');\n";
		$jsReadOnly .= "\t\$j('#year').replaceWith('<div class=\"form-control-static\" id=\"year\">' + (\$j('#year').val() || '') + '</div>'); \$j('#year-multi-selection-help').hide();\n";
		$jsReadOnly .= "\t\$j('.select2-container').hide();\n";

		$noUploads = true;
	} else {
		// temporarily disable form change handler till time and datetime pickers are enabled
		$jsEditable = "\t\$j('form').eq(0).data('already_changed', true);";
		$jsEditable .= "\t\$j('form').eq(0).data('already_changed', false);"; // re-enable form change handler
	}

	// process combos
	$templateCode = str_replace('<%%COMBO(gender)%%>', $combo_gender->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(gender)%%>', $combo_gender->SelectedData, $templateCode);
	$templateCode = str_replace(
		'<%%COMBO(dob)%%>',
		(!$fieldsAreEditable ?
			'<div class="form-control-static">' . $combo_dob->GetHTML(true) . '</div>' :
			$combo_dob->GetHTML()
		), $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(dob)%%>', $combo_dob->GetHTML(true), $templateCode);
	$templateCode = str_replace(
		'<%%COMBO(admission_date)%%>',
		(!$fieldsAreEditable ?
			'<div class="form-control-static">' . $combo_admission_date->GetHTML(true) . '</div>' :
			$combo_admission_date->GetHTML()
		), $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(admission_date)%%>', $combo_admission_date->GetHTML(true), $templateCode);
	$templateCode = str_replace('<%%COMBO(department)%%>', $combo_department->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(department)%%>', $combo_department->MatchText, $templateCode);
	$templateCode = str_replace('<%%URLCOMBOTEXT(department)%%>', urlencode($combo_department->MatchText), $templateCode);
	$templateCode = str_replace('<%%COMBO(year)%%>', $combo_year->HTML, $templateCode);
	$templateCode = str_replace('<%%COMBOTEXT(year)%%>', $combo_year->SelectedData, $templateCode);

	/* lookup fields array: 'lookup field name' => ['parent table name', 'lookup field caption'] */
	$lookup_fields = ['department' => ['departments_table', 'Department'], ];
	foreach($lookup_fields as $luf => $ptfc) {
		$pt_perm = getTablePermissions($ptfc[0]);

		// process foreign key links
		if(($pt_perm['view'] && isDetailViewEnabled($ptfc[0])) || $pt_perm['edit']) {
			$templateCode = str_replace("<%%PLINK({$luf})%%>", '<button type="button" class="btn btn-default view_parent" id="' . $ptfc[0] . '_view_parent" title="' . html_attr($Translation['View'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-eye-open"></i></button>', $templateCode);
		}

		// if user has insert permission to parent table of a lookup field, put an add new button
		if($pt_perm['insert'] /* && !Request::val('Embedded')*/) {
			$templateCode = str_replace("<%%ADDNEW({$ptfc[0]})%%>", '<button type="button" class="btn btn-default add_new_parent" id="' . $ptfc[0] . '_add_new" title="' . html_attr($Translation['Add New'] . ' ' . $ptfc[1]) . '"><i class="glyphicon glyphicon-plus text-success"></i></button>', $templateCode);
		}
	}

	// process images
	$templateCode = str_replace('<%%UPLOADFILE(id)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(name)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(gender)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(dob)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(email)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(phone)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(address)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(admission_date)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(department)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(course)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(year)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(created_by)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(created_at)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(last_updated_by)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(last_updated_at)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(created_by_username)%%>', '', $templateCode);
	$templateCode = str_replace('<%%UPLOADFILE(last_updated_by_username)%%>', '', $templateCode);

	// process values
	if($hasSelectedId) {
		if( $dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', safe_html($urow['id']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(id)%%>', html_attr($row['id']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode($urow['id']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(name)%%>', safe_html($urow['name']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(name)%%>', html_attr($row['name']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(name)%%>', urlencode($urow['name']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(gender)%%>', safe_html($urow['gender']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(gender)%%>', html_attr($row['gender']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(gender)%%>', urlencode($urow['gender']), $templateCode);
		$templateCode = str_replace('<%%VALUE(dob)%%>', app_datetime($row['dob']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(dob)%%>', urlencode(app_datetime($urow['dob'])), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(email)%%>', safe_html($urow['email']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(email)%%>', html_attr($row['email']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(email)%%>', urlencode($urow['email']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(phone)%%>', safe_html($urow['phone']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(phone)%%>', html_attr($row['phone']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(phone)%%>', urlencode($urow['phone']), $templateCode);
		if($fieldsAreEditable) {
			$templateCode = str_replace('<%%HTMLAREA(address)%%>', '<textarea maxlength="65500" name="address" id="address" rows="5">' . safe_html(htmlspecialchars_decode($row['address'])) . '</textarea>', $templateCode);
		} else {
			$templateCode = str_replace('<%%HTMLAREA(address)%%>', '<div id="address" class="form-control-static">' . $row['address'] . '</div>', $templateCode);
		}
		$templateCode = str_replace('<%%VALUE(address)%%>', nl2br($row['address']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(address)%%>', urlencode($urow['address']), $templateCode);
		$templateCode = str_replace('<%%VALUE(admission_date)%%>', app_datetime($row['admission_date']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(admission_date)%%>', urlencode(app_datetime($urow['admission_date'])), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(department)%%>', safe_html($urow['department']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(department)%%>', html_attr($row['department']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(department)%%>', urlencode($urow['department']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(course)%%>', safe_html($urow['course']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(course)%%>', html_attr($row['course']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(course)%%>', urlencode($urow['course']), $templateCode);
		if( $dvprint) $templateCode = str_replace('<%%VALUE(year)%%>', safe_html($urow['year']), $templateCode);
		if(!$dvprint) $templateCode = str_replace('<%%VALUE(year)%%>', html_attr($row['year']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(year)%%>', urlencode($urow['year']), $templateCode);
		$templateCode = str_replace('<%%VALUE(created_by)%%>', safe_html($urow['created_by']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(created_by)%%>', urlencode($urow['created_by']), $templateCode);
		$templateCode = str_replace('<%%VALUE(created_at)%%>', safe_html($urow['created_at']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(created_at)%%>', urlencode($urow['created_at']), $templateCode);
		$templateCode = str_replace('<%%VALUE(last_updated_by)%%>', safe_html($urow['last_updated_by']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(last_updated_by)%%>', urlencode($urow['last_updated_by']), $templateCode);
		$templateCode = str_replace('<%%VALUE(last_updated_at)%%>', safe_html($urow['last_updated_at']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(last_updated_at)%%>', urlencode($urow['last_updated_at']), $templateCode);
		$templateCode = str_replace('<%%VALUE(created_by_username)%%>', safe_html($urow['created_by_username']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(created_by_username)%%>', urlencode($urow['created_by_username']), $templateCode);
		$templateCode = str_replace('<%%VALUE(last_updated_by_username)%%>', safe_html($urow['last_updated_by_username']), $templateCode);
		$templateCode = str_replace('<%%URLVALUE(last_updated_by_username)%%>', urlencode($urow['last_updated_by_username']), $templateCode);
	} else {
		$templateCode = str_replace('<%%VALUE(id)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(id)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(name)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(name)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(gender)%%>', 'Male', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(gender)%%>', urlencode('Male'), $templateCode);
		$templateCode = str_replace('<%%VALUE(dob)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(dob)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(email)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(email)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(phone)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(phone)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%HTMLAREA(address)%%>', '<textarea maxlength="65500" name="address" id="address" rows="5"></textarea>', $templateCode);
		$templateCode = str_replace('<%%VALUE(admission_date)%%>', '1', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(admission_date)%%>', urlencode('1'), $templateCode);
		$templateCode = str_replace('<%%VALUE(department)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(department)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(course)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(course)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(year)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(year)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(created_by)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(created_by)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(created_at)%%>', '<%%creationDateTime%%>', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(created_at)%%>', urlencode('<%%creationDateTime%%>'), $templateCode);
		$templateCode = str_replace('<%%VALUE(last_updated_by)%%>', '', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(last_updated_by)%%>', urlencode(''), $templateCode);
		$templateCode = str_replace('<%%VALUE(last_updated_at)%%>', '<%%editingDateTime%%>', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(last_updated_at)%%>', urlencode('<%%editingDateTime%%>'), $templateCode);
		$templateCode = str_replace('<%%VALUE(created_by_username)%%>', '<%%creatorUsername%%>', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(created_by_username)%%>', urlencode('<%%creatorUsername%%>'), $templateCode);
		$templateCode = str_replace('<%%VALUE(last_updated_by_username)%%>', '<%%editorUsername%%>', $templateCode);
		$templateCode = str_replace('<%%URLVALUE(last_updated_by_username)%%>', urlencode('<%%editorUsername%%>'), $templateCode);
	}

	// process translations
	$templateCode = parseTemplate($templateCode);

	// clear scrap
	$templateCode = str_replace('<%%', '<!-- ', $templateCode);
	$templateCode = str_replace('%%>', ' -->', $templateCode);

	// hide links to inaccessible tables
	if(Request::val('dvprint_x') == '') {
		$templateCode .= "\n\n<script>\$j(function() {\n";
		$arrTables = getTableList();
		foreach($arrTables as $name => $caption) {
			$templateCode .= "\t\$j('#{$name}_link').removeClass('hidden');\n";
			$templateCode .= "\t\$j('#xs_{$name}_link').removeClass('hidden');\n";
		}

		$templateCode .= $jsReadOnly;
		$templateCode .= $jsEditable;

		if(!$hasSelectedId) {
		}

		$templateCode.="\n});</script>\n";
	}

	// ajaxed auto-fill fields
	$templateCode .= '<script>';
	$templateCode .= '$j(function() {';


	$templateCode.="});";
	$templateCode.="</script>";
	$templateCode .= $lookups;

	// handle enforced parent values for read-only lookup fields
	$filterField = Request::val('FilterField');
	$filterOperator = Request::val('FilterOperator');
	$filterValue = Request::val('FilterValue');

	// don't include blank images in lightbox gallery
	$templateCode = preg_replace('/blank.gif" data-lightbox=".*?"/', 'blank.gif"', $templateCode);

	// don't display empty email links
	$templateCode=preg_replace('/<a .*?href="mailto:".*?<\/a>/', '', $templateCode);

	/* default field values */
	$rdata = $jdata = get_defaults('students_table');
	if($hasSelectedId) {
		$jdata = get_joined_record('students_table', $selectedId);
		if($jdata === false) $jdata = get_defaults('students_table');
		$rdata = $row;
	}
	$templateCode .= loadView('students_table-ajax-cache', ['rdata' => $rdata, 'jdata' => $jdata]);

	// hook: students_table_dv
	if(function_exists('students_table_dv')) {
		$args = [];
		students_table_dv(($hasSelectedId ? $selectedId : FALSE), getMemberInfo(), $templateCode, $args);
	}

	return $templateCode;
}